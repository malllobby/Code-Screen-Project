import time
def test_fibonacci(function_name, counts=40):
    result = {}
    for i in range(0, counts + 1):
         print(f'{i} : {function_name(i):,}')                       
With for loop
# using for loop 

def fibonacci_loop(num):
    if num == 0:
        return 0
    elif num == 1 or num == 2:
        return 1
    elif num > 2:
        a = 1 # variable for (n - 1)
        b = 1 # variable for (n - 2)
        for _ in range(3, num + 1):
            c = a + b
            a, b = b, c
            
        return c
test_fibonacci(fibonacci_loop)
0 : 0
1 : 1
2 : 1
3 : 2
4 : 3
5 : 5
6 : 8
7 : 13
8 : 21
9 : 34
10 : 55
11 : 89
12 : 144
13 : 233
14 : 377
15 : 610
16 : 987
17 : 1,597
18 : 2,584
19 : 4,181
20 : 6,765
21 : 10,946
22 : 17,711
23 : 28,657
24 : 46,368
25 : 75,025
26 : 121,393
27 : 196,418
28 : 317,811
29 : 514,229
30 : 832,040
31 : 1,346,269
32 : 2,178,309
33 : 3,524,578
34 : 5,702,887
35 : 9,227,465
36 : 14,930,352
37 : 24,157,817
38 : 39,088,169
39 : 63,245,986
40 : 102,334,155
%time fibonacci_loop(40)
CPU times: user 6 탎, sys: 0 ns, total: 6 탎
Wall time: 8.11 탎





102334155


def fibonacci_recursion(num):
    '''Return a fibonacci sequence value of num'''
    if num == 0:
        return 0
    if num == 1 or num == 2:
        return 1
    
    return fibonacci_recursion(num - 2) + fibonacci_recursion(num - 1)
# Test with recursion
test_fibonacci(fibonacci_recursion)
0 : 0
1 : 1
2 : 1
3 : 2
4 : 3
5 : 5
6 : 8
7 : 13
8 : 21
9 : 34
10 : 55
11 : 89
12 : 144
13 : 233
14 : 377
15 : 610
16 : 987
17 : 1,597
18 : 2,584
19 : 4,181
20 : 6,765
21 : 10,946
22 : 17,711
23 : 28,657
24 : 46,368
25 : 75,025
26 : 121,393
27 : 196,418
28 : 317,811
29 : 514,229
30 : 832,040
31 : 1,346,269
32 : 2,178,309
33 : 3,524,578
34 : 5,702,887
35 : 9,227,465
36 : 14,930,352
37 : 24,157,817
38 : 39,088,169
39 : 63,245,986
40 : 102,334,155
%time fibonacci_recursion(40)
CPU times: user 26.5 s, sys: 64 ms, total: 26.6 s
Wall time: 26.6 s


102334155

# Recursive Method 2 : With using explicit cache
cache = {}

def fibonacci_cache(num):
    '''Return a fibonacci sequence value of num'''

    if num in cache:
        return cache[num]

    if num == 0:
        result = 0
    elif num == 1 or num == 2:
        result = 1
    else:
        result = fibonacci_cache(num - 2) + fibonacci_cache(num - 1)
    
    cache[num] = result
    return result
# Test with using explicit cache
test_fibonacci(fibonacci_cache)
0 : 0
1 : 1
2 : 1
3 : 2
4 : 3
5 : 5
6 : 8
7 : 13
8 : 21
9 : 34
10 : 55
11 : 89
12 : 144
13 : 233
14 : 377
15 : 610
16 : 987
17 : 1,597
18 : 2,584
19 : 4,181
20 : 6,765
21 : 10,946
22 : 17,711
23 : 28,657
24 : 46,368
25 : 75,025
26 : 121,393
27 : 196,418
28 : 317,811
29 : 514,229
30 : 832,040
31 : 1,346,269
32 : 2,178,309
33 : 3,524,578
34 : 5,702,887
35 : 9,227,465
36 : 14,930,352
37 : 24,157,817
38 : 39,088,169
39 : 63,245,986
40 : 102,334,155
%time fibonacci_cache(40)
CPU times: user 2 탎, sys: 0 ns, total: 2 탎
Wall time: 5.01 탎





102334155


# import library
from functools import lru_cache
# Recursive Method 3 : with implicit cache provided by functools

# set cache with 1000 (need to set a big values, small cache is NOT useful)
@lru_cache(maxsize = 1000)

def fibonacci(num):
    '''Return a fibonacci sequence value of num'''

    if num == 0:
        return 0
    if num == 1 or num == 2:
        return 1
    
    return fibonacci(num - 2) + fibonacci(num - 1)
test_fibonacci(fibonacci)
0 : 0
1 : 1
2 : 1
3 : 2
4 : 3
5 : 5
6 : 8
7 : 13
8 : 21
9 : 34
10 : 55
11 : 89
12 : 144
13 : 233
14 : 377
15 : 610
16 : 987
17 : 1,597
18 : 2,584
19 : 4,181
20 : 6,765
21 : 10,946
22 : 17,711
23 : 28,657
24 : 46,368
25 : 75,025
26 : 121,393
27 : 196,418
28 : 317,811
29 : 514,229
30 : 832,040
31 : 1,346,269
32 : 2,178,309
33 : 3,524,578
34 : 5,702,887
35 : 9,227,465
36 : 14,930,352
37 : 24,157,817
38 : 39,088,169
39 : 63,245,986
40 : 102,334,155
%time fibonacci(40)
CPU times: user 3 탎, sys: 0 ns, total: 3 탎
Wall time: 5.25 탎





102334155